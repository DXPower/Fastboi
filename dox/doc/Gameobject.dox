/**
 * @struct Fastboi::Gameobject
 * @brief The core "unit" of Fastboi. Gameobject lifespan is managed by Fastboi, and component lifespan is managed
 * by the gameobject.
 * 
 * Specific gameobjects, such as a Player or Bullet, should be publicly extended from Gameobject. Added functions will
 * not have access to Gameobject::Start() or Gameobject::Update(). For this functionality, you must add a Component.
 * 
 * When extended Gameobject, all the required components should be added in the ctor of the derived class.
 * Thus, once Start() is called on all the components, it is guarenteed that any component codependencies are satisfied.
 * 
 * In examples/Gameobject.cpp
 * @dontinclude examples/Gameobject.cpp
 * @skip "Example Gameobject"
 * @skip //
 * @until Fastboi::Destroy
 */
/**
 * @fn void Gameobject::Start()
 * @brief This function is called at the beginning of the first frame after instantiation. This calls all
 * child components' ComponentBase::Start().
 * 
 * Start() is guarenteed to be called after the ctor and before Gameobject::Update().
*/

/**
 * @fn Gameobject::Gameobject(const Gameobject& copy)
 * @b =delete
*/

/**
 * @fn Gameobject::Gameobject(const Gameobject&& copy)
 * @b =delete
*/

/**
 * @fn Gameobject::~Gameobject()
 * Called at the end of the frame Fastboi::Destroy() was called on this object.
*/

/**
 * @fn void Gameobject::Update()
 * @brief This function is called every frame after instantiation. This calls all
 * child components' ComponentBase::Update().
 * 
 * \b Update() is guarenteed to be called after Gameobject::Start() and before Gameobject::Destroy(). 
*/

/**
 * @fn T& Fastboi::Gameobject::AddComponent(Args&&... args)
 * @brief Adds component of type \b T (with args \b args ) to the control of the gameobject. `T::Start()` and 
 * `T::Update()` are called if they are available.
 * 
 * If \b T has a constructor of the form `T(GORef&&, Args&&...)`, then that constructor will be called.
 * Else, the constructor of the form `T(Args&&...)` will be called.

 * `T::Start()` will be immediately called if the gameobject has already been started.
 * 
 * In examples/Gameobject.cpp:
 * @dontinclude examples/Gameobject.cpp
 * @skip "Example AddComponent"
 * @skip Gameobject
 * @until gameobject.AddComponent<Printer>
 * 
 * @tparam T The type of component to be constructed
 * @param args The arguments to be perfectly forwarded to the ctor of @b T.  
 * @return @b T& Reference to the component just created.
 */

/**
 * @fn T& Fastboi::Gameobject::GetComponent()
 * @brief Gets component of type \b T.
 * 
 * in examples/Gameobject.cpp:
 * @dontinclude examples/Gameobject.cpp
 * @skip "Example GetComponent"
 * @skip Gameobject
 * @until ColorComp&
 * 
 * @tparam T The type of component to get
 * @return @b T& Reference to the component
 */

/**
 * @fn T& Fastboi::Gameobject::HasComponent()
 * @brief Checks if the gameobject has a component of type @b T.
 * 
 * @tparam T The type of component to check for
 * @return @b bool Whether the gameobject has a component of type @b T
*/

/**
 * @fn void Fastboi::Gameobject::RemoveComponent()
 * @brief Removes component of type @b T.
 * 
 * @tparam T The type of component to remove
*/

/**
 * @fn void Fastboi::Gameobject::Enable()
 * @brief Allows the Gameobject to receive Gameobject::Update() calls, and thus all child components as well.
*/

/**
 * @fn void Fastboi::Gameobject::EnableComponent()
 * @brief Allows a child component of type \b T to receive updates via `T::Update()`.
 * @tparam T The type of the component to disable
*/

/**
 * @fn void Fastboi::Gameobject::Disable()
 * @brief Prevents any further calls to Gameobject::Update(), and thus all child components as well.
*/

/**
 * @fn void Fastboi::Gameobject::DisableComponent()
 * @brief Prevents a child component of type \b T from any updates via `T::Update()`.
 * @tparam T The type of the component to disable
*/

/**
 * @fn void Fastboi::Gameobject::Duplicate()
 * @brief Duplicates a Gameobject and all its components.
 * Components are duplicated by calling each components copy constructor. It is not necessary to attempt to copy
 * any GORef members, as that will be handled automatically by Fastboi.
*/

/**
 * @fn void Fastboi::Gameobject::DuplicateComponent(Gameobject& dest)
 * @brief Duplicates a component from \b *this to \b dest.
 * Components are duplicated by calling each components copy constructor. It is not necessary to attempt to copy
 * any GORef members, as that will be handled automatically by Fastboi.
 * @tparam T The type of the component to duplicate
 * @param dest The destination gameobject to which the component will be duplicated
 * @return \b T& A reference to the duplicated component in \b dest
*/
